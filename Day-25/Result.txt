runfile('D:/Courses/AI-ML/Let\'s Upgrade AI-ML/Jupiter_NoteBook/Assignments/Day-25/Day-25-Titanic-Servival.py', wdir='D:/Courses/AI-ML/Let\'s Upgrade AI-ML/Jupiter_NoteBook/Assignments/Day-25')
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 889 entries, 0 to 888
Data columns (total 12 columns):
 #   Column       Non-Null Count  Dtype  
---  ------       --------------  -----  
 0   PassengerId  889 non-null    int64  
 1   Survived     889 non-null    int64  
 2   Pclass       889 non-null    int64  
 3   Name         889 non-null    object 
 4   Sex          889 non-null    object 
 5   Age          889 non-null    float64
 6   SibSp        889 non-null    int64  
 7   Parch        889 non-null    int64  
 8   Ticket       889 non-null    object 
 9   Fare         889 non-null    float64
 10  Cabin        202 non-null    object 
 11  Embarked     889 non-null    object 
dtypes: float64(2), int64(5), object(5)
memory usage: 83.5+ KB
None
Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',
       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],
      dtype='object')
       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare
count   889.000000  889.000000  889.000000  ...  889.000000  889.000000  889.000000
mean    446.000000    0.382452    2.311586  ...    0.524184    0.382452   32.096681
std     256.998173    0.486260    0.834700  ...    1.103705    0.806761   49.697504
min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000
25%     224.000000    0.000000    2.000000  ...    0.000000    0.000000    7.895800
50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200
75%     668.000000    1.000000    3.000000  ...    1.000000    0.000000   31.000000
max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200

[8 rows x 7 columns]
   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked
0            1         0       3  ...   7.2500   NaN         S
1            2         1       1  ...  71.2833   C85         C
2            3         1       3  ...   7.9250   NaN         S
3            4         1       1  ...  53.1000  C123         S
4            5         0       3  ...   8.0500   NaN         S

[5 rows x 12 columns]
Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare',
       'Embarked'],
      dtype='object')
   Survived  Pclass  Sex   Age  SibSp  Parch     Fare  Embarked
0         0       3    1  22.0      1      0   7.2500         2
1         1       1    0  38.0      1      0  71.2833         0
2         1       3    0  26.0      0      0   7.9250         2
3         1       1    0  35.0      1      0  53.1000         2
4         0       3    1  35.0      0      0   8.0500         2
<class 'pandas.core.indexes.base.Index'>
Survived
8
Survived
Index(['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'], dtype='object')
==================================================================
Score 0.7307692307692307
Survived model.score(x,y) is 0.7641752577319587 
Accuracy score is 0.7307692307692307
==================================================================
Confusion Matrix: 
[[68 19]
 [23 46]]
==================================================================
0
Pclass
Index(['Survived', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'], dtype='object')
==================================================================
Score 0.6025641025641025
Pclass model.score(x,y) is 0.586340206185567 
Accuracy score is 0.6025641025641025
==================================================================
Confusion Matrix: 
[[16  8 20]
 [ 4  8 11]
 [ 7 12 70]]
==================================================================
1
Sex
Index(['Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked'], dtype='object')
==================================================================
Score 0.7371794871794872
Sex model.score(x,y) is 0.7680412371134021 
Accuracy score is 0.7371794871794872
==================================================================
Confusion Matrix: 
[[46 18]
 [23 69]]
==================================================================
2
SibSp
Index(['Survived', 'Pclass', 'Sex', 'Age', 'Parch', 'Fare', 'Embarked'], dtype='object')
==================================================================
Score 0.6794871794871795
SibSp model.score(x,y) is 0.6597938144329897 
Accuracy score is 0.6794871794871795
==================================================================
Confusion Matrix: 
[[93 13  0  0  0  0]
 [30 13  0  0  0  0]
 [ 3  0  0  0  0  0]
 [ 0  1  0  0  0  0]
 [ 0  2  0  0  0  0]
 [ 1  0  0  0  0  0]]
==================================================================
3
Parch
Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Fare', 'Embarked'], dtype='object')
==================================================================
Score 0.7307692307692307
Parch model.score(x,y) is 0.7036082474226805 
Accuracy score is 0.7307692307692307
==================================================================
Confusion Matrix: 
[[108  11   0   0   0]
 [ 17   6   0   0   0]
 [ 11   1   0   0   0]
 [  0   1   0   0   0]
 [  1   0   0   0   0]]
==================================================================
4
Embarked
Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare'], dtype='object')
==================================================================
Score 0.6858974358974359
Embarked model.score(x,y) is 0.7255154639175257 
Accuracy score is 0.6858974358974359
==================================================================
Confusion Matrix: 
[[  0   0  33]
 [  0   0  16]
 [  0   0 107]]
==================================================================
5
5 6
with_train_data
Train Data Head Function
   PassengerId  Pclass  ...     Fare Embarked
0          892       3  ...   7.8292        Q
1          893       3  ...   7.0000        S
2          894       2  ...   9.6875        Q
3          895       3  ...   8.6625        S
4          896       3  ...  12.2875        S

[5 rows x 10 columns]
Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare',
       'Embarked'],
      dtype='object')
0.7641752577319587
Index(['PassengerId', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch',
       'Ticket', 'Fare', 'Embarked'],
      dtype='object')
